@model TechnicalTest.Models.Product

@{
    bool isEditing = ViewBag.IsEditing;
    string actionName = isEditing ? "Edit" : "Create";
    if (isEditing)
    {
        ViewBag.Title = "Edit";
    }
    else
    {
        ViewBag.Title = "Create";
    }
}

@using (Html.BeginForm(actionName, "Products", FormMethod.Post, new { autocomplete = "off", id = "form-id" }))
{
    @Html.AntiForgeryToken()

    <div class="form-content">
        @if (isEditing)
        {
            <h2>Edit the product</h2>
        }
        else
        {
            <h2>Create a new product</h2>
        }
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-div">
            @Html.LabelFor(model => model.Name)*
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { placeholder = "Product name...", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
        <div class="form-div">
            @Html.LabelFor(model => model.Description)*
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { placeholder = "Product description..." } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>

        <div class="form-div">
            @Html.LabelFor(model => model.Category)*
            @Html.DropDownList("IdCategory", (List<SelectListItem>)ViewBag.Categories)
        </div>


        <div class="form-div">
            @if (isEditing)
            {
                <input type="submit" value="Edit product" class="btn btn-success" id="submit-button" />
            }
            else
            {
                <input type="submit" value="Create product" class="btn btn-success" id="submit-button" />
            }
        </div>

        <div class="form-div">
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-warning" })
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/technicaltest.js" type="text/javascript"></script>
}
